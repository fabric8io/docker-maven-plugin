<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <!--
  Integration test demo which makes some small tests for Jolokia

  Call it with: 'mvn verify'

  The test does the following:

  * Creates a Docker data container with 'jolokia.war' and 'jolokia-it.war' as described in
    assembly descriptor src/main/docker-assembly.xml
  * Starts (and optionally pull) the jolokia/tomcat-7.0 container with the data container linked to it
  * Waits until Tomcat is up (i.e. until it is reachable via an HTTP request)
  * Runs an integration test via maven-failsafe-plugin, using rest-assured for accessing the deployed app.
  * Prints out some version information about the container running (in order prove that's not a fake ;-)
  * Stops and removes the containers.

  -->

  <parent>
    <groupId>io.fabric8.dmp.samples</groupId>
    <artifactId>dmp-sample-parent</artifactId>
    <version>0.33-SNAPSHOT</version>
    <relativePath>../pom.xml</relativePath>
  </parent>

  <groupId>io.fabric8</groupId>
  <artifactId>dmp-sample-cargo-jolokia</artifactId>
  <version>0.33-SNAPSHOT</version>

  <url>http://www.jolokia.org</url>

  <properties>
    <tomcat>7.0</tomcat>
    <image>consol/tomcat-${tomcat}</image>
    <jolokia.version>1.2.1</jolokia.version>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
  </properties>

  <dependencies>
    <!-- Dependencies with their version which are referenced from the
       src/main/docker-assembly.xml descriptor. These are the WAR files which gets
       stored in the data docker container which then is linked into tomcat container for
       deployment -->
    <!-- Jolokia Agent -->
    <dependency>
      <groupId>org.jolokia</groupId>
        <artifactId>jolokia-war</artifactId>
      <version>${jolokia.version}</version>
      <type>war</type>
    </dependency>

    <!-- ======================================================================================  -->
    <!-- Used for the integration tests -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>com.jayway.restassured</groupId>
      <artifactId>rest-assured</artifactId>
      <version>2.3.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>io.fabric8</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <configuration>
        <machine>
          <autoCreate>true</autoCreate>
          <createOptions>
            <virtualbox-memory>10000</virtualbox-memory>
            <virtualbox-no-share></virtualbox-no-share>
          </createOptions>
        </machine>
          <images>
            <image>
              <name>${image}</name>
              <run>
                <ports>
                  <!-- Port mappings: Container internal port (which must be exposed) will be
                 dynamically mapped and this (random) port will be assigned to the maven variable
                 ${tomcat.port}. Multiple port mapping can be specified here-->
                  <port>jolokia.port:8080</port>
                </ports>
                <wait>
                  <!-- The plugin waits until this URL is reachable via HTTP ... -->
                  <http>
                    <url>http://${docker.host.address}:${jolokia.port}/jolokia</url>
                  </http>
                  <!-- ... but at max 10 seconds -->
                  <time>10000</time>
                </wait>
              </run>
            </image>
          </images>
        </configuration>
      </plugin>


      <plugin>
        <groupId>org.codehaus.cargo</groupId>
        <artifactId>cargo-maven2-plugin</artifactId>
        <configuration>

          <!-- Use Tomcat 7 as server -->
          <container>
            <containerId>tomcat7x</containerId>
            <type>remote</type>
          </container>

          <!-- Server specific configuration -->
          <configuration>
            <type>runtime</type>
            <properties>
              <cargo.hostname>localhost</cargo.hostname>

              <!-- This is the port chosen by Docker -->
              <cargo.servlet.port>${jolokia.port}</cargo.servlet.port>

              <!-- User as configured in the Docker image -->
              <cargo.remote.username>admin</cargo.remote.username>
              <cargo.remote.password>admin</cargo.remote.password>
            </properties>
          </configuration>

          <deployables>
            <!-- Deploy a Jolokia agent -->
            <deployable>
              <groupId>org.jolokia</groupId>
              <artifactId>jolokia-war</artifactId>
              <type>war</type>
              <properties>
                <context>/jolokia</context>
              </properties>
            </deployable>
          </deployables>
        </configuration>
        <executions>
          <execution>
            <id>start-server</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>deploy</goal>
            </goals>
          </execution>
        </executions>
      </plugin>


      <!-- fails-safe-plugin should be used instead of surefire so that the container gets stopped even
           when the tests fail -->
      <plugin>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>2.17</version>
        <configuration>
          <systemPropertyVariables>
            <!-- Needs to be repeated here (the following two lines strangely doesn't work when the next line is omitted although)
                 Maven, you little sneaky beast ... -->
            <jolokia.port>${jolokia.port}</jolokia.port>

            <!-- Map maven variables to system properties which in turn can be used in the test classes -->
            <jolokia.url>http://localhost:${jolokia.port}/jolokia</jolokia.url>
            <jolokia.version>${jolokia.version}</jolokia.version>
          </systemPropertyVariables>
        </configuration>
      </plugin>

    </plugins>
  </build>
</project>
