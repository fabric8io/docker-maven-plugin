<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <!--
  Integration test demo which makes some small tests for Jolokia

  Call it with: 'mvn verify'

  The test does the following:

  * Creates a Docker data container with 'jolokia.war' and 'jolokia-it.war' as described in
    assembly descriptor src/main/docker-assembly.xml
  * Starts (and optionally pull) the jolokia/tomcat-7.0 container with the data container linked to it
  * Waits until Tomcat is up (i.e. until it is reachable via an HTTP request)
  * Runs an integration test via maven-failsafe-plugin, using rest-assured for accessing the deployed app.
  * Prints out some version information about the contaner running (in order prove that's not a fake ;-)
  * Stops and removes the containers.

  -->

  <groupId>org.jolokia</groupId>
  <artifactId>docker-jolokia-demo</artifactId>
  <version>0.11.1</version>

  <url>http://www.jolokia.org</url>

  <properties>
    <server.version>7.0</server.version>
    <server.name>tomcat</server.name>
    <image>consol/${server.name}-${server.version}:latest</image>
    <jolokia.version>1.2.2</jolokia.version>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
  </properties>

  <dependencies>
    <!-- Dependencies with their version which are referenced from the
       src/main/docker-assembly.xml descriptor. These are the WAR files which gets
       stored in the data docker container which then is linked into tomcat container for
       deployment -->
    <!-- Jolokia Agent -->
    <dependency>
      <groupId>org.jolokia</groupId>
      <artifactId>jolokia-war</artifactId>
      <version>${jolokia.version}</version>
      <type>war</type>
    </dependency>
    <!-- Jolokia Integration Test Setup (registers some Test MBeans) -->
    <dependency>
      <groupId>org.jolokia</groupId>
      <artifactId>jolokia-it-war</artifactId>
      <version>${jolokia.version}</version>
      <type>war</type>
    </dependency>

    <!-- ======================================================================================  -->
    <!-- Used for the integration tests -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
    </dependency>

    <dependency>
      <groupId>com.jayway.restassured</groupId>
      <artifactId>rest-assured</artifactId>
      <version>2.3.1</version>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.jolokia</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <version>${project.version}</version>
        <configuration>
          <logDate>default</logDate>
          <images>
            <!-- Docker Image to use -->
            <image>
              <!-- App-Server Image -->
              <alias>server</alias>
              <name>${image}</name>
              <run>
                <volumes>
                  <from>
                    <image>data</image>
                  </from>
                </volumes>
                <env>
                  <CATALINA_OPTS>-Xmx32m</CATALINA_OPTS>
                  <!-- Base starts jolokia by default. With this, it can be disabled -->
                  <JOLOKIA_OFF>1</JOLOKIA_OFF>
                </env>
                <ports>
                  <!-- Port mappings: Container internal port (which must be exposed) will be
                 dynamically mapped and this (random) port will be assigned to the maven variable
                 ${jolokia.port}. Multiple port mappings can be specified here-->
                  <port>jolokia.port:8080</port>
                  <port>8600:53/udp</port>
                </ports>
                <wait>
                  <!-- The plugin waits until this URL is reachable via HTTP ... -->
                  <log>Server startup</log>
                  <url>http://localhost:${jolokia.port}/jolokia</url>
                  <time>10000</time>
                  <shutdown>500</shutdown>
                </wait>
                <log>
                  <enabled>true</enabled>
                  <color>red</color>
              </log>
              </run>
            </image>
            <image>
              <alias>data</alias>
              <!-- Artifact Image-->
              <name>jolokia/${project.artifactId}:${project.version}</name>
              <build>
                <!-- The assembly descriptor prepares the "/maven" directory in the temporary data
                   container which will be made available to the specified container. The startup script in the
                   container (jolokia/tomcat-7.0) should check for files in this directory and use them
                   for deploying them. I.e. this image has a script 'deploy-and-run.sh' which exactly
                   does this. -->
                <assembly>
                  <descriptor>assembly.xml</descriptor>
                </assembly>
              </build>
            </image>
          </images>
        </configuration>
        <!-- Connect this plugin to the maven lifecycle around the integration-test phase. I.e. start the container
             in pre-integration-test and stop it in post-integration-test. -->
        <executions>
          <execution>
            <id>start</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>build</goal>
              <goal>start</goal>
            </goals>
          </execution>
          <execution>
            <id>stop</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>stop</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- fails-safe-plugin should be used instead of surefire so that the container gets stopped even
           when the tests fail -->
      <plugin>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>2.17</version>
        <executions>
          <execution>
            <id>integration-test</id>
            <goals>
              <goal>integration-test</goal>
            </goals>
          </execution>
          <execution>
            <id>verify</id>
            <goals>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <systemPropertyVariables>
            <!-- Needs to be repeated here (the following two lines strangely doesn't work when the next line is omitted although)
                 Maven, you little sneaky beast ... -->
            <jolokia.port>${jolokia.port}</jolokia.port>

            <!-- Map maven variables to system properties which in turn can be used in the test classes -->
            <jolokia.url>http://localhost:${jolokia.port}/jolokia</jolokia.url>
            <jolokia.version>${jolokia.version}</jolokia.version>
          </systemPropertyVariables>
        </configuration>
      </plugin>


      <!-- Tell surefire to skip test, we are using the failsafe plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.10</version>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.2</version>
        <configuration>
          <source>1.7</source>
          <target>1.7</target>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>merge</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.jolokia</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <configuration combine.self="override">
              <images>
                <image>
                  <!-- Artifact Image-->
                  <name>jolokia/${project.artifactId}:${project.version}</name>
                  <build>
                    <from>${image}</from>
                    <assemblyDescriptor>src/main/docker-assembly.xml</assemblyDescriptor>
                  </build>
                  <run>
                    <env>
                      <CATALINA_OPTS>-Xmx32m</CATALINA_OPTS>
                      <JOLOKIA_OFF>1</JOLOKIA_OFF>
                    </env>
                    <ports>
                      <!-- Port mappings: Container internal port (which must be exposed) will be
                         dynamically mapped and this (random) port will be assigned to the maven variable
                         ${tomcat.port}. Multiple port mapping can be specified here-->
                      <port>jolokia.port:8080</port>
                    </ports>
                    <wait>
                      <!-- The plugin waits until this URL is reachable via HTTP ... -->
                      <url>http://localhost:${jolokia.port}/jolokia</url>
                      <time>10000</time>
                    </wait>
                  </run>
                </image>
              </images>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>props</id>
      <properties>
        <docker.name>jolokia/${project.artifactId}:${project.version}</docker.name>
        <docker.alias>service</docker.alias>
        <docker.from>${image}</docker.from>
        <docker.assemblyDescriptor>src/main/docker-assembly.xml</docker.assemblyDescriptor>
        <docker.env.CATALINA_OPTS>-Xmx32m</docker.env.CATALINA_OPTS>
        <docker.env.JOLOKIA_OPTS>1</docker.env.JOLOKIA_OPTS>
        <docker.ports.jolokia.port>8080</docker.ports.jolokia.port>
        <docker.wait.url>http://localhost:${jolokia.port}/jolokia</docker.wait.url>
        <docker.time>10000</docker.time>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.jolokia</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <configuration combine.self="override">
              <images>
                <image>
                  <external>
                    <type>props</type>
                    <prefix>docker</prefix>
                  </external>
                </image>
              </images>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>tomcat</id>
      <properties>
        <server.name>tomcat</server.name>
        <server.version>7.0</server.version>
      </properties>
      <activation><activeByDefault/></activation>
    </profile>

    <profile>
      <id>jetty</id>
      <properties>
        <server.name>jetty</server.name>
        <server.version>8</server.version>
      </properties>
    </profile>

  </profiles>
</project>
